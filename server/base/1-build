# ///////building our variables, compute gallery definition, and the ARM template for our host pool in Azure Image Builder//////
# Be sure to load from the global variables as well if you are coming back to make changes

# whatever you want to name your image definition. this is Pool specific
$imageDefName = "server-2022-base"

# whatever you want to name your image template. this is Pool specific
$imageTemplateName = "server-2022-datacenter-azure-edition-eastus"
# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////


# /////////////This section contains situational commands that may need to be run before proceeding///////////////
# create gallery definition for this pool. this normally only needs to be done once for the initial build of an image for a new pool.
# New-AzGalleryImageDefinition -GalleryName $sigGalleryName -ResourceGroupName $imageResourceGroup -Location $location -Name $imageDefName -OsState generalized -OsType Windows -Publisher 'myCo' -Offer 'server' -Sku '2022-datacenter-azure-edition'

# remove the current image template to update or decommission the image builder for this pool. Delete this template first. It will remove the staging resource group (IT_) used by AIB
# Remove-AzImageBuilderTemplate -ResourceGroupName $imageResourceGroup -Name $imagetemplatename

# remove the image definition if you doing a FULL decommission of this pool
# Remove-AzGalleryImageDefinition -ResourceGroupName $imageResourceGroup -GalleryName $sigGalleryName -GalleryImageDefinitionName $imageDefName
# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////


# /////////configure the ARM template and create an AIB Image Template. this template is pool specific ////////////////////
# Configure the ARM template. Change the URL path for this pool's json
$templateUrl="https://raw.githubusercontent.com/OtterDoom/AzureImageBuild/main/server/base/armtemplateServer.json"
$templateFilePath = "armTemplateServer.json"

Invoke-WebRequest -Uri $templateUrl -OutFile $templateFilePath -UseBasicParsing

((Get-Content -path $templateFilePath -Raw) -replace '<subscriptionID>',$subscriptionID) | Set-Content -Path $templateFilePath
((Get-Content -path $templateFilePath -Raw) -replace '<rgName>',$imageResourceGroup) | Set-Content -Path $templateFilePath
((Get-Content -path $templateFilePath -Raw) -replace '<region>',$location) | Set-Content -Path $templateFilePath
((Get-Content -path $templateFilePath -Raw) -replace '<runOutputName>',$runOutputName) | Set-Content -Path $templateFilePath
((Get-Content -path $templateFilePath -Raw) -replace '<imageDefName>',$imageDefName) | Set-Content -Path $templateFilePath
((Get-Content -path $templateFilePath -Raw) -replace '<sharedImageGalName>',$sigGalleryName) | Set-Content -Path $templateFilePath
((Get-Content -path $templateFilePath -Raw) -replace '<region1>',$location) | Set-Content -Path $templateFilePath
((Get-Content -path $templateFilePath -Raw) -replace '<imgBuilderId>',$identityNameResourceId) | Set-Content -Path $templateFilePath
((Get-Content -path $templateFilePath -Raw) -replace '<vmSize>',$vmsize) | Set-Content -Path $templateFilePath

# submit the template to Azure Image Builder
New-AzResourceGroupDeployment -ResourceGroupName $imageResourceGroup -TemplateFile $templateFilePath -api-version "2020-02-14" -imageTemplateName $imageTemplateName -svclocation $location

# Optional - if you have any errors running the above, run:
$getStatus=$(Get-AzImageBuilderTemplate -ResourceGroupName $imageResourceGroup -Name $imageTemplateName)
$getStatus.ProvisioningErrorCode 
$getStatus.ProvisioningErrorMessage
# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////


# ////////////////////////////////////////build the image/////////////////////////////////////////////////////////
Start-AzImageBuilderTemplate -ResourceGroupName $imageResourceGroup -Name $imageTemplateName -NoWait

# to check the status of build process
$getStatus=$(Get-AzImageBuilderTemplate -ResourceGroupName $imageResourceGroup -Name $imageTemplateName)

# these show the status the build
$getStatus.LastRunStatusRunState 
$getStatus.LastRunStatusMessage
$getStatus.LastRunStatusRunSubState

# this shows all the properties
$getStatus | Format-List -Property *
# /////////////////////////////////////////////////////////////////////////////////////////////////////////////////