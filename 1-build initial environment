#DO NOT DO THIS IF YOUR ENVIRONMENT IS ALREADY SET UP. THIS IS FOR FIRST TIME SETUP ONLY!!!!!!
# make sure to Connect-AzAccount AND set your context if you are doing a redeploy, skipped 1-prerequisites, or have multiple subscriptions
# building our variables, base environment, and compute gallery.

# get existing Azure account context
$currentAzContext = Get-AzContext

# get your current subscription ID
$subscriptionID = $currentAzContext.Subscription.Id

# the Azure region to deploy to. Region names: Get-AzLocation | Select-Object Location | Sort-Object Location
$location = "eastus2"

# name of your destination resource group
$imageResourceGroup = "RG-AIB1-EastUS2"

# Managed identity
$identityName="ImageBuilderAIB1EastUS2"

# custom role name
$imageRoleDefName="AIB Contributor AIB1EastUS2"

# whatever you want to name your image gallery
$sigGalleryName = "AIBGallery1EastUS2"

# distribution properties object name (runOutput), i.e. this gives you the properties of the managed image on completion
$runOutputName = "sigOutput"

# custom role variables
$aibRoleImageCreationUrl = "win-sysadmin\AzureImageBuild\aibRoleImageCreation.json"
$aibRoleImageCreationPath = "aibRoleImageCreation.json"

#Vnet Information. This is where Image Builder will build and capture. This assumes you already have an existing VNET,subnet, nsg to use.
# VNET 
$vnetName="vnet-hub1-eastus"
# subnet name
$subnetName="Utility"
# VNET resource group name
$vnetRgName="RG-Hub1EastUS"
# NSG name on the subnet
$nsgname="nsg-corp-utility"

# create the resource group
New-AzResourceGroup -Name $imageResourceGroup -Location $location
# pause a moment for the Resource Group to complete creation

# create a managed identity to run our automation
New-AzUserAssignedIdentity -ResourceGroupName $imageResourceGroup -Name $identityName -Location $location
$identityNameResourceId = $(Get-AzUserAssignedIdentity -ResourceGroupName $imageResourceGroup -Name $identityName).Id
$identityNamePrincipalId = $(Get-AzUserAssignedIdentity -ResourceGroupName $imageResourceGroup -Name $identityName).PrincipalId
# pause a moment for the Managed Identity to complete creation

# create and assign custom role to the managed identity that allows it to manipulate images and VMs inside only specific Resource Groups
# download custom role configuration
#Invoke-WebRequest -Uri $aibRoleImageCreationUrl -OutFile $aibRoleImageCreationPath -UseBasicParsing
Get-Content $aibRoleImageCreationUrl | Out-File $aibRoleImageCreationPath
((Get-Content -path $aibRoleImageCreationPath -Raw) -replace '<subscriptionID>',$subscriptionID) | Set-Content -Path $aibRoleImageCreationPath
((Get-Content -path $aibRoleImageCreationPath -Raw) -replace '<rgName>', $imageResourceGroup) | Set-Content -Path $aibRoleImageCreationPath
((Get-Content -path $aibRoleImageCreationPath -Raw) -replace '<vnetRgName>', $vnetRgName) | Set-Content -Path $aibRoleImageCreationPath
((Get-Content -path $aibRoleImageCreationPath -Raw) -replace 'Azure Image Builder Service Image Creation Role', $imageRoleDefName) | Set-Content -Path $aibRoleImageCreationPath

# create custom role definition
New-AzRoleDefinition -InputFile  ./aibRoleImageCreation.json
# pause a moment for the role definition to complete creation

# grant custom role definition to the managed identity
New-AzRoleAssignment -ObjectId $identityNamePrincipalId -RoleDefinitionName $imageRoleDefName -Scope "/subscriptions/$subscriptionID/resourceGroups/$imageResourceGroup"

### NOTE: If you see this error: 'New-AzRoleDefinition: Role definition limit exceeded. No more role definitions can be created.' See this article to resolve:
# https://docs.microsoft.com/en-us/azure/role-based-access-control/troubleshooting

# create gallery
New-AzGallery -GalleryName $sigGalleryName -ResourceGroupName $imageResourceGroup -Location $location

# Allow Azure Load Balancer to communicate with the proxy VM in a network security group.
Get-AzNetworkSecurityGroup -Name $nsgName -ResourceGroupName $vnetRgName  | Add-AzNetworkSecurityRuleConfig -Name AzureImageBuilderAccess -Description "Allow Image Builder Private Link Access to Proxy VM" -Access Allow -Protocol Tcp -Direction Inbound -Priority 400 -SourceAddressPrefix AzureLoadBalancer -SourcePortRange * -DestinationAddressPrefix VirtualNetwork -DestinationPortRange 60000-60001 | Set-AzNetworkSecurityGroup

# Disable private link service policy on the subnet
$virtualNetwork= Get-AzVirtualNetwork -Name $vnetName -ResourceGroupName $vnetRgName
($virtualNetwork | Select -ExpandProperty subnets | Where-Object  {$_.Name -eq $subnetName} ).privateLinkServiceNetworkPolicies = "Disabled"
$virtualNetwork | Set-AzVirtualNetwork